swagger: "2.0"
info: 
  description: "Swagger API for building a sensor network."
  version: "1.0"
  title: "Swagger Sensor network builder"
  contact:
    email: "pietari.pakarinen@tuni.fi"
    name: "Pietari Pakarinen"
tags:
- name: "building"
  description: "Building related"
- name: "sensor"
  description: "Sensor related"
paths:
  /building:
    post:
      tags:
      - "building"
      summary: "Add a new building"
      description: "Add a new building. Building data is included as JSON in the message body."
      operationId: "addBuilding"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Building object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Building"
      responses:
        "405":
          description: "Invalid input"
    get:
      tags:
      - "building"
      summary: "Receive all buildings"
      operationId: "getAllBuildings"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Building"
  /building/{buildingId}:
    get:
      tags:
      - "building"
      summary: "Find building by ID"
      description: "Returns a single building"
      operationId: "getPetById"
      produces:
      - "application/json"
      parameters:
      - name: "buildingId"
        in: "path"
        description: "ID of building to return"
        required: true
        type: "string"
        format: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Building"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Building not found"
    patch:
      tags:
      - "building"
      summary: "Update a building with a specific building ID"
      operationId: "patchBuildingById"
      consumes:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Building"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Building not found"
  /sensor:
    put:
      tags:
      - "sensor"
      summary: "Add a new sensor"
      operationId: "addSensor"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "sensor object that needs to be added to a building"
        required: true
        schema:
          $ref: "#/definitions/Sensor"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Sensor"
  /sensor/{sensorId}:
    get:
      tags:
      - "sensor"
      summary: "Deletes a sensor"
      operationId: "deleteSensor"
      produces:
      - "application/json"
      parameters:
      - name: "sensorId"
        in: "path"
        description: "Sensor id to delete"
        required: true
        type: "string"
        format: "string"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Sensor not found"
  /sensor/findAllByBuilding/{buildingId}:
    get:
      tags:
      - "sensor"
      summary: "Finds all sensors in a specific building"
      operationId: "findSensorsByBuldingId"
      produces:
      - "application/json"
      parameters:
      - name: "buildingId"
        in: "path"
        description: "ID of building from which to return all sensors"
        required: true
        type: "string"
        format: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Sensor"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Sensor not found"
  /sensor/findByState:
    get:
      tags:
      - "sensor"
      summary: "Finds all sensors in a certain state(s)"
      operationId: "findSensorsByStates"
      produces:
      - "application/json"
      parameters:
      - name: "state"
        in: "query"
        description: "states to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Sensor"
        "400":
          description: "Invalid state value"
definitions:
  Building:
    type: "object"
    properties:
      id:
        type: "string"
        format: "string"
      name:
        type: "string"
        format: "string"
      address:
        type: "object"
        properties:
          StreetAddress:
            type: "string"
            format: "string"
          PostNumber:
            type: "integer"
            format: "int64"
  Sensor:
    type: "object"
    properties:
      id:
        type: "string"
        format: "string"
      name:
        type: "string"
        format: "string"
      value:
        type: "number"
        format: "double"
      state:
        type: "string"
        enum:
        - "online"
        - "offline"
        - "error"